********************************************************* 
AVA: cursos.alura.com.br
Formação: 
Curso: Node.js: Controle de acesso e autorização com RBAC
Data Início: 28/04/2021
*********************************************************

Capítulo 01: Controlando acesso com RBAC
#RBAC

1. Baixamos o código inicial a partir de:
        @see https://github.com/alura-cursos/1994-nodeauth3/archive/projeto-inicial.zip
2. Descompactamos e executamos:
        >npm install 
   ...para que as dependencias fossem instaladas no projeto
3. Criamos um middleware de autorização:
        @see src\middlewares\autorizacao.js
   ...utilizando-o na rota de delete do post:
        @see src\posts\posts-rotas.js
4. Adicionamos um novo campo ao banco de dados:
        @see database.js
   ...alterando a controlador, o modelo e o dao do usuário:
        @see src\usuarios\usuarios-controlador.js
        @see src\usuarios\usuarios-modelo.js
        @see src\usuarios\usuarios-dao.js
5. Aplicamos as listas de cargos possíveis nas rotas do post usando o middleware de autorização:
        @see src\posts\posts-rotas.js

Capítulo 02: Política de acesso

1. Política de Acesso de Conteúdo
 
   Propósito: 
        Informações necessárias sobre controle e acesso ao conteúdo no Blog do código
 
   Autenticação: 
        Antes de prosseguir com o uso da API, é necessário que crie uma nova conta através da rota
        POST /usuário, e em seguida, verificar o e-mail da nova conta através da rota POST 
        /usuario/verifica_email/:token.
        
        Com a conta criada e verificada, use a rota de login POST /usuario/login para obter um 
        token de acesso através do cabeçalho Authorization na resposta. Use esse cabeçalho nas
        demais requisições para se autenticar na API e prosseguir no controle de acesso ao 
        conteúdo.

   Controle de Conteúdo:
        Temos o cargo de "assinante", ela apenas pode ler os post do Blog, os posts de qualquer pessoa.
        Temos o cargo de "editor", que pode cadastrar novos posts e gerenciá-los.
        Temos o cargo de "admin", é o cargo para as pessoas que vão gerenciar os usuários e posts.

Capítulo 03: Controle de acesso baseado em permissões (PABC)
#PABC, #ABAC, #isNaN_Function

1. Instalamos o pacote do access control:
        >npm install accesscontrol
2. Criamos um novo objeto em:
        @see src\controleDeAcesso.js
   ...modificando o middleware de autorizacao, usando o novo controle de acesso PABC:
        @see src\middlewares\autorizacao.js
3. Usamos o novo middleware de autorizacao nas rotas dos posts:
        @see src\posts\posts-rotas.js
4. Criamos 2 novos middlewares para autenticacao e autorizacao opcionais:
        @see src\middlewares\tentarAutenticar.js
        @see src\middlewares\tentarAutorizar.js
5. Aplicamos os novos middlewares na rota de lista de posts:
        @see src\posts\posts-rotas.js

Capítulo 04: Confirmação de acesso e filtros
#conversores

1. Para evitar que rotas muito críticas sejam usadas inadivertidamente, por exemplo, a rota de exclusão de 
   usuário ou post, adicionamos mais um middleware de autenticacao na rota, com o intuito de confirmar
   que aquela rota é realmente a rota que desejamos
        @see src\usuarios\usuarios-rotas.js
        @see src\posts\posts-rotas.js
2. Para "centralizar" os tipos de erros que nossa aplicação pode tratar, e evitar repetir tanto código, 
   acrescentamos no servidor da API um middleware do express especialmente designado para tal:
        @see server.js
3. Removemos e adaptamos todos os tratamentos de erros espalhados na aplicação para que use o novo middleware:
        @see src\usuarios\usuarios-controlador.js
        @see src\usuarios\middlewares-autenticacao.js
4. Criamos mais 2 classes de Error: "NaoEncontrado" e "NaoAutorizado" em:
        @see src\erros.js
   ...utilizando-a em:
        @see src\usuarios\usuarios-modelo.js
   ...e tratanto-a no middleware do servidor:
        @server.js
5. Criamos uma classe conversora de dados:
        @see src\conversores.js

Capítulo 05: Documentação de código
#ESDOC

1. Alteramos o construtor da classe ConversorPost para aceitar campos extras:
        @see src\conversores.js
2. Alteramos o método "lista" do controlador de posts para definir quais campos retornar de acordo com o "Cargo" 
   do usuário logado:
        @see src\posts\posts-controlador.js
3. Criamos uma nova super classe chamada "Conversor", e a utilizamos para extender a classe "ConversorPost" e uma 
   nova classe "ConversorUsuario":
        @see src\conversores.js
4. Alteramos o método "lista" do controlador de usuários para definir quais campos retornar de acordo com o "Cargo"
   do usuário logado:
        @see src\usuarios\usuarios-controlador.js
5. Criamos uma nova classe extendendo de "Conversor" para definir os campos públicos para Erros: 
        @see src\conversores.js
6. Utilizamos a nova classe ConversorErro no middleware que trata os erros no servidor da app:
        @see server.js
7. Instalamos o ESDOC e o plugin para VS Code:
        >npm install esdoc esdoc-standard-plugin
   ...criando o seu arquivo principal executando no terminal o comando:
        >echo '{"source": "./src", "destination": "./docs", "plugins": [{"name": "esdoc-standard-plugin"}]}' > .esdoc.json
   ...adicionando novos parametros:
        @see .esdoc.json
   ...e executando o gerador de documentos:
        >./node_modules/.bin/esdoc
